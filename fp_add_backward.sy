; EXPECT: unsat
; COMMAND-LINE: --cegqi-si=all --sygus-out=status

(set-logic FP)

;(define-sort MyFloat () Float32)
(define-sort MyFloat () (_ FloatingPoint 4 8))

(define-fun rne () RoundingMode RNE)
(define-fun rtn () RoundingMode RTN)
(define-fun rtp () RoundingMode RTP)

(synth-fun lower ((lx MyFloat) (ly MyFloat)) MyFloat
    (
        (Start MyFloat ((Variable MyFloat)
                        (Constant MyFloat)
                        (fp.sub RND Start Start)
                        (fp.add RND Start Start)
        ))
     (RND RoundingMode (rne rtp rtn)
)))

(declare-var x MyFloat)
(declare-var y MyFloat)
(declare-var a MyFloat)
(declare-var b MyFloat)

;(constraint (= (lower RNE a b) (fp.add RNE a b)))


(constraint (and
            ;;; main constraint we suppose that we know that only the upper bound of a and lower
            ;;; bound of the result is needed
             (=> (and (not (fp.isInfinite y)) (not (fp.isInfinite x)) (fp.leq a x) (fp.leq y (fp.add RNE a b)))
                 (fp.leq (lower x y) b))
            ;;; Additional constraint to _try_ to remove trivial results
            (not (fp.isInfinite (lower (_ +zero 4 8) (_ +zero 4 8))))
            (not (= (fp #b1 #b1110 #b1111111) (lower (_ +zero 4 8) (_ +zero 4 8))))
            (fp.leq (fp #b1 #b0001 #b0000000) (lower (_ +zero 4 8) (_ +zero 4 8)))
            (fp.leq (lower (_ +zero 4 8) (_ +zero 4 8)) (fp #b0 #b0001 #b0000000))
))



(check-synth)
